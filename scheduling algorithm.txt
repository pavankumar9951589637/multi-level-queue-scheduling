#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

struct Process {
    int id;         // Process ID
    int arrival;    // Arrival time
    int burst;      // Burst time
    int priority;   // Priority
};

void queue1(struct Process *processes, int n) {
    // Implement Fixed Priority Preemptive Scheduling (Queue 1)
    // Priority 0 is the highest priority.

    int time = 0;  // Current time

    for (int i = 0; i < n; i++) {
        int min_arrival_time = INT_MAX;
        int min_arrival_index = -1;

        for (int j = i; j < n; j++) {
            if (processes[j].arrival <= time && processes[j].priority < min_arrival_time) {
                min_arrival_time = processes[j].priority;
                min_arrival_index = j;
            }
        }

        if (min_arrival_index == -1) {
            continue;
        }

        // Execute the process for a multiple of 2 time units
        int execute_time = (processes[min_arrival_index].burst < 2) ? processes[min_arrival_index].burst : 2;
        processes[min_arrival_index].burst -= execute_time;

        // Display the execution
        printf("Queue 1: Process %d (Priority %d) is executing for %d units\n",
               processes[min_arrival_index].id, processes[min_arrival_index].priority, execute_time);

        time += execute_time;

        // Check for preemption and move to Queue 2 if needed
        if (processes[min_arrival_index].burst > 0) {
            processes[min_arrival_index].priority++;  // Lower priority in Queue 2
            printf("Queue 1: Process %d preempted and moved to Queue 2\n", processes[min_arrival_index].id);
        }
    }
}

void queue2(struct Process *processes, int n, int time_quantum) {
    // Implement Round Robin Scheduling for processes in Queue 2

    int remaining_burst[n];  // Remaining burst time for processes

    for (int i = 0; i < n; i++) {
        remaining_burst[i] = processes[i].burst;
    }

    int time = 0;
    int flag = 0;

    while (1) {
        flag = 0;
        for (int i = 0; i < n; i++) {
            if (remaining_burst[i] > 0) {
                flag = 1;  // At least one process is remaining

                if (remaining_burst[i] <= time_quantum) {
                    // Execute the process for the remaining burst time
                    time += remaining_burst[i];
                    printf("Queue 2: Process %d is executing for %d units\n", processes[i].id, remaining_burst[i]);
                    remaining_burst[i] = 0;
                } else {
                    // Execute the process for the specified time quantum
                    time += time_quantum;
                    remaining_burst[i] -= time_quantum;
                    printf("Queue 2: Process %d is executing for %d units\n", processes[i].id, time_quantum);
                }
            }
        }

        if (flag == 0) {
            break;  // All processes in Queue 2 are executed
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrival);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst);
        printf("Enter priority for Process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
    }

    int time_quantum;
    printf("Enter time quantum for Queue 2: ");
    scanf("%d", &time_quantum);

    queue1(processes, n);  // Execute processes in Queue 1
    queue2(processes, n, time_quantum);  // Execute processes in Queue 2

    return 0;
}
